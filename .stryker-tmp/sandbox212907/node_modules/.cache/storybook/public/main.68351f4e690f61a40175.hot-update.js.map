{"version":3,"file":"main.68351f4e690f61a40175.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AAEA","sources":["webpack://otus-react-ts-course/./src/components/game-of-life/game-of-life.tsx"],"sourcesContent":["import React, { FC, useEffect, useState, MouseEventHandler, useRef, ChangeEvent } from 'react';\r\nimport Grid from '../grid/grid';\r\nimport { getConwaysPistol, getEmptyGrid, GridAxisValues, GRID_AXIS_VALUES_INFO } from './game-of-life.utils';\r\nimport s from './game-of-life.module.css';\r\nimport { cloneDeep } from 'lodash';\r\n\r\nconst GameOfLife: FC = () => {\r\n  const [x, setX] = useState(GRID_AXIS_VALUES_INFO[GridAxisValues.Small].x);\r\n  const [y, setY] = useState(GRID_AXIS_VALUES_INFO[GridAxisValues.Small].y);\r\n  const [grid, setGrid] = useState<boolean[][]>([]);\r\n  const [startLife, setStartLife] = useState(false);\r\n  const [generation, setGeneration] = useState(0);\r\n  const [speed, setSpeed] = useState(100);\r\n  const intervalRef = useRef<number>();\r\n\r\n  useEffect(() => {\r\n    const newGrid = getEmptyGrid(x, y);\r\n    setGrid(newGrid);\r\n  }, [x, y]);\r\n\r\n  useEffect(() => {\r\n    if (startLife) {\r\n      intervalRef.current = window.setInterval(logicOfLife, speed);\r\n    }\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [grid, speed, startLife]);\r\n\r\n  const selectSquare = (row: number, column: number) => {\r\n    const newGrid = [...grid];\r\n    newGrid[row][column] = !grid[row][column];\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const handleChangeGrid: MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    const { name } = e.currentTarget;\r\n    if (name === GridAxisValues.Small) {\r\n      setX(GRID_AXIS_VALUES_INFO[name].x);\r\n      setY(GRID_AXIS_VALUES_INFO[name].y);\r\n    } else if (name === GridAxisValues.Medium) {\r\n      setX(GRID_AXIS_VALUES_INFO[name].x);\r\n      setY(GRID_AXIS_VALUES_INFO[name].y);\r\n    } else if (name === GridAxisValues.Large) {\r\n      setX(GRID_AXIS_VALUES_INFO[name].x);\r\n      setY(GRID_AXIS_VALUES_INFO[name].y);\r\n    } else if (name === GridAxisValues.ConwaysPistol) {\r\n      const newGrid = getConwaysPistol(grid);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const logicOfLife = () => {\r\n    const gridClone = grid;\r\n    const newGrid = cloneDeep(grid);\r\n\r\n    for (let i = 0; i < x; i++) {\r\n      for (let j = 0; j < y; j++) {\r\n        let count = 0;\r\n        if (i > 0) if (gridClone[i - 1][j]) count++;\r\n        if (i > 0 && j > 0) if (gridClone[i - 1][j - 1]) count++;\r\n        if (i > 0 && j < y - 1) if (gridClone[i - 1][j + 1]) count++;\r\n        if (j < y - 1) if (gridClone[i][j + 1]) count++;\r\n        if (j > 0) if (gridClone[i][j - 1]) count++;\r\n        if (i < x - 1) if (gridClone[i + 1][j]) count++;\r\n        if (i < x - 1 && j > 0) if (gridClone[i + 1][j - 1]) count++;\r\n        if (i < x - 1 && y - 1) if (gridClone[i + 1][j + 1]) count++;\r\n        if (gridClone[i][j] && (count < 2 || count > 3)) newGrid[i][j] = false;\r\n        if (!gridClone[i][j] && count === 3) newGrid[i][j] = true;\r\n      }\r\n    }\r\n\r\n    setGrid(newGrid);\r\n    setGeneration((prev) => prev + 1);\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setStartLife(true);\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = window.setInterval(logicOfLife, speed);\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setStartLife(false);\r\n    clearInterval(intervalRef.current);\r\n  };\r\n\r\n  const handleClearGrid = () => {\r\n    const newGrid = getEmptyGrid(x, y);\r\n    setStartLife(false);\r\n    setGeneration(0);\r\n    setGrid(newGrid);\r\n    clearInterval(intervalRef.current);\r\n  };\r\n\r\n  const handleRandomGridSquares = () => {\r\n    const newGrid = grid.map((rowArr) => rowArr.map(() => Math.floor(Math.random() * 4) === 1));\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const handleChangeSpeed = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newSpeed = parseInt(e.currentTarget.value);\r\n    if (newSpeed <= 0) return;\r\n    setSpeed(newSpeed);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 data-testid=\"game_of_life_title\">Игра в жизнь</h1>\r\n      <div className={s.buttonGroup}>\r\n        <button onClick={handleStart}>Старт</button>\r\n        <button onClick={handleStop}>Стоп</button>\r\n        <button onClick={handleRandomGridSquares}>Заполнить поле</button>\r\n        <button onClick={handleClearGrid}>Очистить</button>\r\n        <input type=\"number\" value={speed} onChange={handleChangeSpeed} />\r\n      </div>\r\n      <h3>Generations: {generation}</h3>\r\n      <Grid grid={grid} y={y} selectSquare={selectSquare} />\r\n      <h3>Изменить поле:</h3>\r\n      <div className={s.buttonGroup}>\r\n        <button name={GridAxisValues.Small} onClick={handleChangeGrid} data-testid={GridAxisValues.Small}>\r\n          30х50\r\n        </button>\r\n        <button name={GridAxisValues.Medium} onClick={handleChangeGrid} data-testid={GridAxisValues.Medium}>\r\n          50х70\r\n        </button>\r\n        <button name={GridAxisValues.Large} onClick={handleChangeGrid} data-testid={GridAxisValues.Large}>\r\n          90х70\r\n        </button>\r\n        <button name={GridAxisValues.ConwaysPistol} onClick={handleChangeGrid}>\r\n          Conway's Pistol grid\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOfLife;\r\n"],"names":[],"sourceRoot":""}